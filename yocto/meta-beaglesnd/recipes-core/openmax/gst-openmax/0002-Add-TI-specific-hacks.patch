From 3d87ab532df1b39578690dbb09dc68975779af91 Mon Sep 17 00:00:00 2001
From: Felipe Contreras <felipe.contreras@nokia.com>
Date: Tue, 3 Feb 2009 15:27:33 +0200
Subject: [PATCH 2/7] Add TI-specific hacks

Mostly buffer sizes. This needs to be implemented properly with dynamic
port configuration.

Signed-off-by: Felipe Contreras <felipe.contreras@nokia.com>

diff --git a/omx/gstomx_base_videodec.c b/omx/gstomx_base_videodec.c
index 56b79d1..4434a97 100644
--- a/omx/gstomx_base_videodec.c
+++ b/omx/gstomx_base_videodec.c
@@ -245,6 +245,55 @@ omx_setup (GstOmxBaseFilter *omx_base)
 
             OMX_SetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
         }
+
+        /* some workarounds required for TI components. */
+        {
+            OMX_COLOR_FORMATTYPE color_format;
+            gint width, height;
+
+            {
+                param.nPortIndex = 0;
+                OMX_GetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+
+                width = param.format.video.nFrameWidth;
+                height = param.format.video.nFrameHeight;
+
+                /* this is against the standard; nBufferSize is read-only. */
+                param.nBufferSize = (width * height) / 2;
+
+                OMX_SetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+            }
+
+            /* the component should do this instead */
+            {
+                param.nPortIndex = 1;
+                OMX_GetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+
+                param.format.video.nFrameWidth = width;
+                param.format.video.nFrameHeight = height;
+
+                /** @todo get this from the srcpad. */
+                param.format.video.eColorFormat = OMX_COLOR_FormatCbYCrY;
+
+                color_format = param.format.video.eColorFormat;
+
+                /* this is against the standard; nBufferSize is read-only. */
+                switch (color_format)
+                {
+                    case OMX_COLOR_FormatYCbYCr:
+                    case OMX_COLOR_FormatCbYCrY:
+                        param.nBufferSize = (width * height) * 2;
+                        break;
+                    case OMX_COLOR_FormatYUV420Planar:
+                        param.nBufferSize = (width * height) * 3 / 2;
+                        break;
+                    default:
+                        break;
+                }
+
+                OMX_SetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+            }
+        }
     }
 
     GST_INFO_OBJECT (omx_base, "end");
diff --git a/omx/gstomx_base_videoenc.c b/omx/gstomx_base_videoenc.c
index f469494..476318a 100644
--- a/omx/gstomx_base_videoenc.c
+++ b/omx/gstomx_base_videoenc.c
@@ -269,6 +269,55 @@ omx_setup (GstOmxBaseFilter *omx_base)
 
             OMX_SetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
         }
+
+        /* some workarounds required for TI components. */
+        {
+            OMX_COLOR_FORMATTYPE color_format;
+            gint width, height;
+            gulong framerate;
+
+            /* the component should do this instead */
+            {
+                param.nPortIndex = 0;
+                OMX_GetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+
+                width = param.format.video.nFrameWidth;
+                height = param.format.video.nFrameHeight;
+                framerate = param.format.video.xFramerate;
+                color_format = param.format.video.eColorFormat;
+
+                /* this is against the standard; nBufferSize is read-only. */
+                switch (color_format)
+                {
+                    case OMX_COLOR_FormatYCbYCr:
+                    case OMX_COLOR_FormatCbYCrY:
+                        param.nBufferSize = (width * height) * 2;
+                        break;
+                    case OMX_COLOR_FormatYUV420Planar:
+                        param.nBufferSize = (width * height) * 3 / 2;
+                        break;
+                    default:
+                        break;
+                }
+
+                OMX_SetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+            }
+
+            /* the component should do this instead */
+            {
+                param.nPortIndex = 1;
+                OMX_GetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+
+                /* this is against the standard; nBufferSize is read-only. */
+                param.nBufferSize = width * height;
+
+                param.format.video.nFrameWidth = width;
+                param.format.video.nFrameHeight = height;
+                param.format.video.xFramerate = framerate;
+
+                OMX_SetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+            }
+        }
     }
 
     GST_INFO_OBJECT (omx_base, "end");
diff --git a/omx/gstomx_jpegenc.c b/omx/gstomx_jpegenc.c
index 0ca4f8e..ff2d771 100644
--- a/omx/gstomx_jpegenc.c
+++ b/omx/gstomx_jpegenc.c
@@ -322,6 +322,66 @@ omx_setup (GstOmxBaseFilter *omx_base)
 
             OMX_SetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
         }
+
+        /* some workarounds required for TI components. */
+        {
+            OMX_COLOR_FORMATTYPE color_format;
+            gint width, height;
+
+            /* the component should do this instead */
+            {
+                param.nPortIndex = 0;
+                OMX_GetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+
+                width = param.format.image.nFrameWidth;
+                height = param.format.image.nFrameHeight;
+                color_format = param.format.image.eColorFormat;
+
+                /* this is against the standard; nBufferSize is read-only. */
+                switch (color_format)
+                {
+                    case OMX_COLOR_FormatYCbYCr:
+                    case OMX_COLOR_FormatCbYCrY:
+                        param.nBufferSize = (GST_ROUND_UP_16 (width) * GST_ROUND_UP_16 (height)) * 2;
+#if 0
+                        if (param.nBufferSize >= 400)
+                            param.nBufferSize = 400;
+#endif
+                        break;
+                    case OMX_COLOR_FormatYUV420Planar:
+                        param.nBufferSize = (GST_ROUND_UP_16 (width) * GST_ROUND_UP_16 (height)) * 3 / 2;
+#if 0
+                        if (param.nBufferSize >= 1600)
+                            param.nBufferSize = 1600;
+#endif
+                        break;
+                    default:
+                        break;
+                }
+
+                OMX_SetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+            }
+
+            /* the component should do this instead */
+            {
+                param.nPortIndex = 1;
+                OMX_GetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+
+                param.nBufferSize = width * height;
+
+#if 0
+                if (qualityfactor < 10)
+                    param.nBufferSize /= 10;
+                else if (qualityfactor < 100)
+                    param.nBufferSize /= (100 / qualityfactor);
+#endif
+
+                param.format.image.nFrameWidth = width;
+                param.format.image.nFrameHeight = height;
+
+                OMX_SetParameter (gomx->omx_handle, OMX_IndexParamPortDefinition, &param);
+            }
+        }
     }
 
     {
-- 
1.7.0.2

